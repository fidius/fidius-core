#!/usr/bin/ruby

require 'yaml'
require 'drb'
require File.expand_path('../../lib/fidius/config.rb', __FILE__)

begin
  cfg = FIDIUS.config['metasploit']
rescue
  puts "[*] No `metasploit' section in `config/fidius.yml' found. Aborting!"
  raise
end

$:.unshift(File.join cfg['path'], 'lib')
require 'msf/base'

module FIDIUS
  # TODO: Callback-Methoden kapseln

  class MsfDRbD

    attr_reader :uri
    attr_reader :framework

    def initialize
      @framework = Msf::Simple::Framework.create
      @plugin_basepath = File.expand_path('../../lib/msf_plugins/', __FILE__)
    end

    class << self
      def start_service(host='localhost', port=56606, opts={})
        uri = "druby://#{host}:#{port}"
        puts "[*] Loading Metasploit framework."
        obj = self.new
        DRb.start_service uri, obj, opts
        puts "[*] Loaded. Listening on `#{uri}'"
        DRb.thread.join
        puts "[*] Quit."
      end

      def stop_service
        DRb.thread.kill
      end
    end

    def load_plugin(name, opts={})
      @loaded ||= []
      unless @loaded.include? name
        @framework.plugins.load name, opts
        @loaded << name
      end
    end
    
    def unload_plugin(name)
      if @loaded.include? name
        @framework.plugins.unload name
        @loaded.delete name
      end
    end
    
    def list_plugins
      Dir.glob(File.join @plugin_basepath, "**/*.rb").map {|f|
        f.gsub(@plugin_basepath, '').gsub(/\.rb$/, '')
      }
    end

    def run_exploit(exploit, opts)
      mod = @framework.modules.create(exploit)
      Msf::Simple::Exploit.exploit_simple(mod, opts)
    end
    
    def debug
      p @framework
      p @framework.sessions
    end

  private
    def method_missing(method, *args, &block)
      @framework.send(method, *args, &block)
    end

  end # class MsfDRbD
end # module FIDIUS

Signal.trap("INT") do
  puts "[*] Stopping service."
  FIDIUS::MsfDRbD.stop_service
end

puts "[*] Starting service."
FIDIUS::MsfDRbD.start_service cfg['host'], cfg['port'], :verbose => true

