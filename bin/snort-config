#!/usr/bin/env ruby

require File.expand_path('../../lib/fidius.rb', __FILE__)

FIDIUS::Action::Exploit::Autopwner

require 'snortor'

class SnortConfig
  @@config_file = File.expand_path("../../config/evasiondb.yml", __FILE__)
  @@snort_rule_directory = "/etc/snort/" #rules wird wohl autom. appended
  @@exploit_target_host = "10.20.20.1"

  ##
  # THIS IS A CLONE FROM exploit_picker.rb
  ## 
  ##########################################################
  @@SEVERITY_HIGH = "high"
  @@SEVERITY_LOW = "low"
  @@SEVERITY_MEDIUM = "medium"

  def self.severity_value(event)
    return 9 if event.severity == @@SEVERITY_HIGH
    return 6 if event.severity == @@SEVERITY_LOW
    return 3 if event.severity == @@SEVERITY_MEDIUM
  end
  ##########################################################

  def self.start
    # regeln importieren

    @@config = YAML.load_file(@@config_file)#"/home/bernd/fidius/architecture/config/evasiondb.yml")

    FIDIUS.connect_db
    FIDIUS::EvasionDB.config @@config_file #"/home/bernd/fidius/architecture/config/evasiondb.yml"
    FIDIUS::EvasionDB.use_recoder "Msf-Recorder"
    FIDIUS::EvasionDB.use_fetcher "PreludeDB"
    FIDIUS::EvasionDB.use_rule_fetcher "Snortrule-Fetcher"

    begin
      FIDIUS::EvasionDB.current_rule_fetcher.import_rules
    rescue
      puts "no need to import rules, we have already rules in our db"
    end
    bitvector_size = FIDIUS::EvasionDB::Knowledge::IdsRule.all.size
    puts "#{bitvector_size}"
    
    # test call
    t = Array.new(bitvector_size)
    t[0] = 1
    self.test_run(t)
  end

  def self.test_run(bitvector_array)
    FIDIUS::EvasionDB.current_rule_fetcher.import_rules_to_snortor
    # auf basis des bitvectors regeln aktivieren
    self.set_rules(bitvector_array)
    # export rules and 
    self.export_rules
    # restart snort
    self.restart_snort
    # begin recording idmef-events
    FIDIUS::EvasionDB.current_fetcher.begin_record
    # run exploits
    self.run_autopwn

    # evaluate resulting idmef-events
    event_value = 0
    events = FIDIUS::EvasionDB.current_fetcher.fetch_events
    events.each do |event|
      event_value += self.severity_value(event)
    end
    
    puts "#{events.size} events with value of #{event_value}"
  end

  def self.run_autopwn
    puts "** run autopwn"
    autopwner = FIDIUS::Action::Exploit::Exploit.instance
      
    host = FIDIUS::Asset::Host.new
    host.interfaces << FIDIUS::Asset::Interface.new(:ip => @@exploit_target_host)

    inter = host.interfaces.first
    host.save

    scan = FIDIUS::Action::Scan::PortScan.new(inter)
    target = scan.execute
    
    result = autopwner.autopwn inter  
  end

  def self.set_rules(bitvector_array)
    puts "** set rules"
    i = -1
    Snortor.rules.each do |rule|
      rule.active = ((bitvector_array[i+=1]).to_i == 1)
    end
  end

  def self.restart_snort
    puts "** restarting snort"
    Net::SSH.start(@@config["snort-fetcher"]["ssh_host"], @@config["snort-fetcher"]["ssh_user"], :password => @@config["snort-fetcher"]["ssh_pw"]) do |ssh|
      ssh.exec "/etc/init.d/snort restart"
    end
  end

  def self.export_rules
    puts "** exporting rules to #{@@snort_rule_directory}"
    a = {:host=>@@config["snort-fetcher"]["ssh_host"],:user=>@@config["snort-fetcher"]["ssh_user"],:password=>@@config["snort-fetcher"]["ssh_pw"],:remote_path=>@@snort_rule_directory}
    Snortor.export_rules(a)    
  end
end

SnortConfig.start
