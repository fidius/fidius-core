#!/usr/bin/env ruby

require File.expand_path('../../lib/fidius.rb', __FILE__)
require 'snortor'
require 'fidius/decision/snort_conf/genetic_algoirthms'

module GeneticAlgorithm
  class Chromosome
    def fitness
      return SnortConfig.test_run(@data)
    end

    def self.seed
      data_size = SnortConfig.rule_size # Num Rules
      seed = []
      data_size.times do
        seed << rand(2)
      end
      return Chromosome.new(seed)
    end
  end
end
class SnortConfig
  @@config_file = File.expand_path("../../config/evasiondb.yml", __FILE__)
  @@snort_rule_directory = "/etc/snort/rules" #rules wird wohl autom. appended
  @@exploit_target_hosts = ["10.20.20.1","10.20.20.70"]
  @@rule_size = 0
  cattr_accessor :rule_size
  ##
  # THIS IS A CLONE FROM exploit_picker.rb
  ##
  ##########################################################
  @@SEVERITY_HIGH = "high"
  @@SEVERITY_LOW = "low"
  @@SEVERITY_MEDIUM = "medium"

  def self.severity_value(event)
    return 9 if event.severity == @@SEVERITY_HIGH
    return 6 if event.severity == @@SEVERITY_LOW
    return 3 if event.severity == @@SEVERITY_MEDIUM
  end
  ##########################################################

  def self.print_status
    puts "** status"
    i = 0
    FIDIUS::SnortConfig.all(:order=>:events_value).each do |c|
      rule_size = c[:bitvector].size
      puts "  #{i}) [#{c[:active_rules]}/#{rule_size}] Rules generated #{c[:events_count]} with value #{c[:events_value]} and #{c[:false_positives_count]} false positives with value #{c[:false_positives_value]} overall: #{self.eval_function(c[:false_positives_value], c[:events_value]).round(3)}"
      i += 1
    end
    puts "**"
  end

  def self.start
    # regeln importieren
    @@config = YAML.load_file(@@config_file)#"/home/bernd/fidius/architecture/config/evasiondb.yml")

    FIDIUS.connect_db
    FIDIUS::EvasionDB.config @@config_file #"/home/bernd/fidius/architecture/config/evasiondb.yml"
    FIDIUS::EvasionDB.use_recoder "Msf-Recorder"
    FIDIUS::EvasionDB.use_fetcher "PreludeDB"
    FIDIUS::EvasionDB.use_rule_fetcher "Snortrule-Fetcher"

    begin
      FIDIUS::EvasionDB.current_rule_fetcher.import_rules
    rescue
      puts "no need to import rules, we have already rules in our db"
    end

    bitvector_size = FIDIUS::EvasionDB::Knowledge::IdsRule.all.size
    puts "We have #{bitvector_size} rules to analyse"

    # test call
    rules_bitvector = Array.new(bitvector_size)
    @@rule_size = rules_bitvector.size

    search = GeneticAlgorithm::GeneticSearch.new(10, 50)
    puts "starting genetic algorithm"
    result = search.run
    puts "Result cost: #{result.fitness}"
    puts "Reslt tour: #{result.data}"
    #t[0] = 1
    #self.test_run(t)
  end

  def self.test_run(bitvector_array)
    puts "** SnortConfig testrun"
    FIDIUS::EvasionDB.current_rule_fetcher.import_rules_to_snortor
    # auf basis des bitvectors regeln aktivieren
    active_rules = self.set_rules(bitvector_array)
    # export rules and
    self.export_rules
    # restart snort
    snort_restarted = self.restart_snort
    unless snort_restarted
      puts "** UNABLE TO RESTART SNORT RULESET SEEMS INVALID"
      FIDIUS::SnortConfig.create(:bitvector=>bitvector_array.join,:active_rules=>0,:events_count=>0,
      :events_value=>-1,:false_positives_count=>0,:false_positives_value=>-1)
      return 1000000000
    end
    puts "SNORT RESTARTED: #{snort_restarted}"
    # begin recording idmef-events
    FIDIUS::EvasionDB.current_fetcher.begin_record
    # run exploits
    self.run_autopwn

    # evaluate resulting idmef-events
    event_value = 0
    events = FIDIUS::EvasionDB.current_fetcher.fetch_events
    events.each do |event|
      puts event.inspect
      event_value += self.severity_value(event)
    end
    puts "** #{events.size} events with value of #{event_value}"


    # run false positive auxiliaries
    FIDIUS::EvasionDB.current_fetcher.begin_record
    @@exploit_target_hosts.each do |target_host_ip|
      opts = {}
      opts['RHOST'] = target_host_ip
      ["exploit_jmpcall_additive_encoder","web_server_exploit_suspected_php","netbios_share_access"].each do |a|
        puts "running #{a}"
        FIDIUS::Action::Msf.instance.run_auxiliary("auxiliary/ids/false_positive/#{a}", opts, false)
      end

    end
    false_positive_events = FIDIUS::EvasionDB.current_fetcher.fetch_events
    false_positive_value = 0
    false_positive_events.each do |event|
      puts event.inspect
      false_positive_value += self.severity_value(event)
    end

    puts "STORE CONFIG LOG bitvector count:#{bitvector_array.size} bitvector join count: #{bitvector_array.join.size}"

    FIDIUS::SnortConfig.create(:bitvector=>bitvector_array.join,:active_rules=>active_rules,:events_count=>events.size,
      :events_value=>event_value,:false_positives_count=>false_positive_events.size,:false_positives_value=>false_positive_value)

    return self.eval_function(false_positive_value, event_value)
  end

  def self.eval_function(false_positive_value, events_value)
    if false_positive_value == 0
      return events_value
    else
      return (events_value.to_f/false_positive_value.to_f).to_f
    end
  end

  def self.run_autopwn
    puts "** run autopwn"
    @@exploit_target_hosts.each do |target_host_ip|
      autopwner = FIDIUS::Action::Exploit::Exploit.instance
      host = FIDIUS::Asset::Host.new
      host.interfaces << FIDIUS::Asset::Interface.new(:ip => target_host_ip)
      inter = host.interfaces.first
      host.save
      scan = FIDIUS::Action::Scan::PortScan.new(inter)
      target = scan.execute

      autopwner.autopwn inter
    end
  end

  def self.set_rules(bitvector_array)
    puts "** set rules"
    i = -1
    active_rules = 0
    Snortor.rules.each do |rule|
      rule.active = false#((bitvector_array[i+=1]).to_i == 1)
      if (((bitvector_array[i+=1]).to_i == 1))
        active_rules += 1
        rule.active = true
      end
    end
    puts "** we have #{active_rules} rules activated"
    return active_rules
  end
  def self.restart_snort
    puts "** restarting snort"
    restart_ok = true
    Net::SSH.start(@@config["snort-fetcher"]["ssh_host"], @@config["snort-fetcher"]["ssh_user"], :password => @@config["snort-fetcher"]["ssh_pw"]) do |ssh|
      res = ssh.exec "/etc/init.d/snort restart" do|ch, stream, data|
        #puts "Got this on the #{stream} stream: "
        restart_ok = false if data["failed"]
      end
    end
    return restart_ok
  end

  def self.export_rules
    puts "** deleting /etc/snort/rules"
    # fix bug that rules are exported into /etc/snort/rules/rules
    Net::SSH.start(@@config["snort-fetcher"]["ssh_host"], @@config["snort-fetcher"]["ssh_user"], :password => @@config["snort-fetcher"]["ssh_pw"]) do |ssh|
      ssh.exec "rm -rf /etc/snort/rules"
    end


    puts "** exporting rules"
    local_path = "/tmp/rules/"
    remote_path = "/etc/snort"
    a = {:host=>@@config["snort-fetcher"]["ssh_host"],:user=>@@config["snort-fetcher"]["ssh_user"],:password=>@@config["snort-fetcher"]["ssh_pw"],:remote_path=>remote_path,:local_path=>local_path}
    Snortor.export_rules(a)
    #Snortor.export_rules("/home/bernd/fidius/snort/neue_rules")
  end
end
t = Thread.new do
  while true do
    $stdin.gets
    begin
      SnortConfig.print_status
    rescue
      puts $!.inspect
    end
  end
end
SnortConfig.start
