require "fidius/action/exploit/autopwner"

module FIDIUS
  module Action
    module Exploit
      # This class contains a autopwner, which can be run against host.
      # This is a singleton, so do not create a own instance of this object.
      class Exploit
        include Singleton

        def initialize
          @framework = FIDIUS::Action::Msf.instance.framework
          @found_ports, @found_services = get_exploits_by_ports
        end

        # Runs the autopwner against the given interface object.
        # 
        # @param [Interface]  The interface to exploit.
        # @param [String]  The IP address the payload should reverse connect to.
        # @param [Integer]  The port the payload should reverse connect to.
        # @return [Msf::Session] A Session got for this exploit.
        def autopwn rhost, lhost = nil, lport = nil
          autopwner = FIDIUS::Action::Exploit::Autopwner.new rhost, lhost, lport
          autopwner.run_autopwn @found_ports, @found_services
        end

private

        # Finds all exploits and auxiliaries and orders them by port or
        # service.
        #
        # @return [Array] Two lists of 
        def get_exploits_by_ports
          mod_by_port = {}
          mod_by_service = {}
          @framework.exploits.each_module do |modname, mod|
            o = FIDIUS::Action::Msf.instance.module_create(modname)
            if(o.datastore['RPORT'])
              rport = o.datastore['RPORT']
              mod_by_port[rport.to_i] ||= {}
              mod_by_port[rport.to_i][o.fullname] = {:disclosure => o.disclosure_date, :platform => o.platform_to_s}
            end
            if(o.respond_to?('autofilter_services'))
              o.autofilter_services.each do |serv|
                mod_by_service[serv] ||= {}
                mod_by_service[serv][o.fullname] = {:disclosure => o.disclosure_date, :platform => o.platform_to_s}
              end
            end
          end
          [mod_by_port, mod_by_service]
        end

      end # class Exploit
    end # module Exploit
  end # module Action
end # module FIDIUS

