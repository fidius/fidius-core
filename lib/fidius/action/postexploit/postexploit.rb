module FIDIUS
  module Action
    module PostExploit

      autoload :GetInterfaces,     'fidius/action/postexploit/getinterfaces'
      autoload :DetectWebserver,   'fidius/action/postexploit/detect_web_server'
      autoload :InjectIframe,      'fidius/action/postexploit/inject_iframe'
      autoload :AddRoute,          'fidius/action/postexploit/add_route'

      module PostExploit
        include FIDIUS::Action

        # Runs the post exploit on the given meterpreter session.
        #
        # @return [boolean]
        def run session, host
        end

        # Returns true if this post exploit need root or admin rights to run.
        #
        # @return [boolean]
        def needs_root
          false
        end

        def autorun
          false
        end

        def compatible session
          true
        end

        def id
          raise RuntimeError, "provide an id for this postexploit #{self}"
        end

        def name
          self.id
        end

        def description
          "No description available"
        end

      end #class PostExploit

      class PostExploitList

        def get id
          @list[id]
        end

        def initialize
          @list = {}
          @autorun = []
          add_postexploit FIDIUS::Action::PostExploit::GetInterfaces
          add_postexploit FIDIUS::Action::PostExploit::DetectWebserver
          add_postexploit FIDIUS::Action::PostExploit::InjectIframe
          add_postexploit FIDIUS::Action::PostExploit::AddRoute
        end

        def add_postexploit postexploit_class
          postexploit = postexploit_class.new
          @list = @list.merge({postexploit.id => postexploit})
          @autorun << postexploit if postexploit.autorun
        end

        attr_accessor :autorun
        attr_accessor :list
      end

      def self.run sessionID, id
        session = FIDIUS::Action::Msf.instance.framework.sessions[sessionID.to_i]
        raise RuntimeError, "can not get session for #{sessionID} available: #{FIDIUS::Action::Msf.instance.framework.sessions}" unless session
        run_onSession session, id
      end

      def self.run_onSession session, id
        postexpl = (@postExploits.get id)
        raise RuntimeError, "wrong post exploit id" unless postexpl
        session.load_stdapi
        session.load_priv if postexpl.needs_root
        begin
          host = get_host_for_session session
        rescue ::Exception => e
          puts "gettting the interfaces caused an exception in the meterpreter session #{e.inspect}"
        end
        begin
          postexpl.run session, host
        rescue ::Exception => e
          puts "running post exploit #{id} failed because of a problem in the meterpreter: #{e.inspect}"
        end
      end

      def self.autorun session
        @postExploits.autorun.each do |postexploit|
          run_onSession session, postexploit.id
        end
      end
      
      def self.get_exploit_names sessinID
        if sessinID
          session = FIDIUS::Action::Msf.instance.framework.sessions[sessionID.to_i]
          raise RuntimeError, "can not get session for #{sessionID} available: #{FIDIUS::Action::Msf.instance.framework.sessions}" unless session
        end
        result = {}
        @postExploits.list.each do |id, postexploit|
          if !session or postexploit.compatible(session)
            result = result.merge({postexploit.id => { :name => postexploit.name, :description => postexploit.description}})
          end
        end
        result
      end

private

      @postExploits = PostExploitList.new

      def self.get_host_for_session session
        ip = nil
        host = nil
        config = session.net.config
        config.each_interface do |interface|
          next if interface.ip == "127.0.0.1"
          ip = interface.ip
          inter = FIDIUS::Asset::Interface.find_by_ip(ip)
          host = inter.host if inter
          break if host
        end
        return host if host
        return FIDIUS::Asset::Host.find_or_create_by_ip(ip) if ip
      end

    end #module PostExploit
  end #module Action
end #module FIDIUS
