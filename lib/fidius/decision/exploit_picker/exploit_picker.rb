module FIDIUS
  module ExploitPicker

    @@SEVERITY_HIGH = "high"
    @@SEVERITY_LOW = "low"
    @@SEVERITY_MEDIUM = "medium"

    def self.num_severity severity
      return 9 if severity == @@SEVERITY_HIGH
      return 6 if severity == @@SEVERITY_LOW
      return 3 if severity == @@SEVERITY_MEDIUM
    end

    def self.value_of exploit
      mean_severity = 0.0
      return 0 unless exploit.idmef_events
      exploit.idmef_events.each do |event|
        mean_severity = mean_severity + num_severity(event.severity)
      end
      mean_severity = mean_severity / exploit.idmef_events.length
      # num_packets = exploit.packets.length
    end

    def self.exploit_for_interface interface, black_list = nil
      services = interface.services
      max_exploit = nil
      max_exploit_val = 0
      services.each do |service|
        exploits = FIDIUS::EvasionDB::Knowledge.find_exploits_for_service(service.port)
        exploits.each do |exploit|
          val = value_of exploit
          if val > max_exploit_val && (black_list == nil || !black_list.include?(exploit))
            max_exploit_val = val
            max_exploit = exploit
          end
        end
      end
      max_exploit
    end

    def self.exploit_for_service service, black_list = nil
      max_exploit = nil
      max_exploit_val = 0
      exploits = FIDIUS::EvasionDB::Knowledge.find_exploits_for_service(service.port)
      exploits.each do |exploit|
        val = value_of exploit
        if val > max_exploit_val && (black_list == nil || !black_list.include?(exploit))
          max_exploit_val = val
          max_exploit = exploit
        end
      end
      max_exploit
    end

  end
end # FIDIUS
