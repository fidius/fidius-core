require 'test_helper_fidius'
require 'test_helper_integration'
require 'active_support/testing/assertions'

class ExploitTest < FIDIUS::Test
 include ActiveSupport::Testing::Assertions
  def setup
   super
   FIDIUS::Action::Msf.instance.start  if ENV['ENV'] == "test"
  end
  
  def teardown
    FIDIUS::Action::Msf.instance.stop  if ENV['ENV'] == "test"
    super
  end
  
  def test_pwn_host_integration
    run_with_vm [:xp_vm] do
      autopwner = FIDIUS::Action::Exploit::Exploit.instance
      inter = vm_find_interface FIDIUS.config[:tests][:xp_vm]
      scan = FIDIUS::Action::Scan::PortScan.new(inter)
      target = scan.execute
    
      unless inter.host.exploited?
        assert_difference('FIDIUS::Session.all.count',+1) {
          result = autopwner.autopwn inter  
        }
      else
        assert_no_difference('FIDIUS::Session.all.count') {
          result = autopwner.autopwn inter  
        }
      end
      inter = vm_find_interface FIDIUS.config[:tests][:xp_vm]
      assert_equal inter.host.exploited?, true
      assert_equal target, inter.host
    end
  end

  # This tests only works if the test test_pwn_host_integration was successfull
  def test_pwn_host_pivot
    run_with_vm [:xp_vm_pivot] do
      autopwner = FIDIUS::Action::Exploit::Exploit.instance
      inter = vm_find_interface FIDIUS.config[:tests][:xp_vm_pivot]
      scan = FIDIUS::Action::Scan::PortScan.new(inter)
      target = scan.execute

      unless inter.host.exploited?
        assert_difference('FIDIUS::Session.all.count',+1) {
          result = autopwner.autopwn inter  
        }
      else
        assert_no_difference('FIDIUS::Session.all.count') {
          result = autopwner.autopwn inter  
        }
      end
      inter = vm_find_interface FIDIUS.config[:tests][:xp_vm_pivot]
      assert_equal inter.host.exploited?, true
      assert_equal target, inter.host
    end
  end
  
#  def test_vm_not_defined
#    run_with_vm :test_vm do
#    end
#  end
end
