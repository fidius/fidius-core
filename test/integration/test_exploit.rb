require 'test_helper_fidius'
require 'test_helper_integration'
require 'active_support/testing/assertions'

class ExploitTest < FIDIUS::Test
 include ActiveSupport::Testing::Assertions
  def setup
   super
   msfdrbd_path = File.expand_path("../../../bin/msfdrbd",__FILE__)
   x = Open3.popen3(ENV, "/home/lmeyer/Uni/Fidius/git/architecture/bin/msfdrbd")
   @msfdrbd_process = x[3].pid
   sleep(60)
   FIDIUS::Action::Msf.instance.start  if ENV['ENV'] == "test"
  end
  
  def teardown
    FIDIUS::Action::Msf.instance.stop  if ENV['ENV'] == "test"
    super
    p @msfdrbd_process.pid
    IO.popen("kill #{@msfdrbd_process.pid}")
  end
  
  def test_pwn_host_integration
    run_with_vm :xp_vm do
      autopwner = FIDIUS::Action::Exploit::Exploit.instance
      inter = vm_find_interface FIDIUS.config[:tests][:xp_vm]
      scan = FIDIUS::Action::Scan::PortScan.new(inter)
      target = scan.execute
    
      unless inter.host.exploited?
        assert_difference('FIDIUS::Session.all.count',+1) {
          result = autopwner.autopwn inter  
        }
      else
        assert_no_difference('FIDIUS::Session.all.count') {
          result = autopwner.autopwn inter  
        }
      end
      inter = vm_find_interface FIDIUS.config[:tests][:xp_vm]
      assert_equal inter.host.exploited?, true
    end
  end
  
#  def test_vm_not_defined
#    vm_start FIDIUS.config[:tests][:xx]
#  end
end
